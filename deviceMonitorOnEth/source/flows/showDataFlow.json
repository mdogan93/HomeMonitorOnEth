[{"id":"9491eceb.dd0b6","type":"http in","z":"3eadd323.9a17bc","name":"","url":"showData","method":"get","upload":false,"swaggerDoc":"","x":128.95140075683594,"y":212.0069580078125,"wires":[["f6f1dc53.d3c04"]]},{"id":"f6f1dc53.d3c04","type":"function","z":"3eadd323.9a17bc","name":"pullData","func":"//variables\nvar Web3 = global.get('web3');\nvar abi = [\n\t{\n\t\t\"constant\": false,\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"_x\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"setData\",\n\t\t\"outputs\": [],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"constant\": true,\n\t\t\"inputs\": [],\n\t\t\"name\": \"getData\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"payable\": false,\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t}\n];\nvar main_account = \"0xcc7b75f40efdeb554c20de9c8adc3339aabea0cd\";//accounts[0];\n\nvar  web3;\n\n\n//web3.js, checking if node is running\nweb3 = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8000\"));\n\n\nif (!web3.isConnected()) {\n    msg.payload = \"node not connected\";\n\n} else {\n\n    msg.payload = \"node connected\";\n}\n\nvar simpleContract = web3.eth.contract(abi).at(\"0x214334242342c55e7986f37aeca8cf3546071f85\");\nvar password = \"123456\";\nweb3.personal.unlockAccount(main_account,password,30); \n\nvar x = simpleContract.getData({from:main_account});\nmsg.payload=x;\n//fetching smart contract UPC\n// var UPCoin = web3.eth.contract(abi);\n// var contract = UPCoin.at('0x5c62b492ae99db9c2a174f3328ddd2f98773291a');\n\n// //watching event Transfer\n// var filterR1 = contract.Transfer({\n//     to: relay1_account\n//     }, {\n//         fromBlock: 'latest',             //we are searching only latest block\n//         toBlock: 'latest'\n//     });\n\n// filterR1.watch(function(error, result) {\n//         if (!error) {\n//           node.log(\"###########  watch ################# result ####################################\");\n//           node.log(result);\n//           node.log(\"###########  watch ################# end of result #############################\");\n//           amount = (result.args.value);\n//           node.send({data:amount});\n//         }\n//     })\n// node.on('close', function() {\n    \n// filterR1.stopWatching();\n\n// });\n\nreturn msg;\n","outputs":1,"noerr":0,"x":314.9514465332031,"y":335.77780532836914,"wires":[["1f2466a2.128c89"]]},{"id":"1f2466a2.128c89","type":"template","z":"3eadd323.9a17bc","name":"generatePage","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"    <title>Device Monitoring on Ethereum</title>\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\n    <table class=\"table table-striped\">\n    <tr><th>Name</th><th>GeoLocation</th><th>LDR Value</th><th>Mic Value</th><th>Timestamp</th></tr>\n    {{#payload}}\n        <tr class=\"\">\n            <td>{{0}}</td>\n            <td>{{1}}</td>\n            <td>{{2}}</td>\n            <td>{{3}}</td>\n            <td>{{4}}</td>\n        </tr>\n    {{/payload}}\n</table>","output":"str","x":520.9375190734863,"y":208.53474235534668,"wires":[["9b6ab371.6686"]]},{"id":"9b6ab371.6686","type":"http response","z":"3eadd323.9a17bc","name":"","statusCode":"","headers":{},"x":667.9479675292969,"y":339.42015647888184,"wires":[]}]